import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "No route defined for ${route}"
  String pageNotFound(String route) => "No route defined for ${route}";
  /// "Test text"
  String get testText => "Test text";
  /// "You have pushed the button this many times:"
  String get firstText => "You have pushed the button this many times:";
  /// "Go to login"
  String get goToLogin => "Go to login";
  /// "Login title"
  String get loginScreenTitle => "Login title";
  /// "We're in the login screen!!"
  String get loginScreenText => "We're in the login screen!!";
  /// "Back"
  String get loginScreenBack => "Back";
  /// "How Would it be?"
  String get bankScreenTitle => "How Would it be?";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_es_ES extends I18n {
  const _I18n_es_ES();

  /// "No existe una ruta definida para ${route}"
  @override
  String pageNotFound(String route) => "No existe una ruta definida para ${route}";
  /// "Texto de prueba"
  @override
  String get testText => "Texto de prueba";
  /// "Has presionado el boton varias veces"
  @override
  String get firstText => "Has presionado el boton varias veces";
  /// "Ir a login"
  @override
  String get goToLogin => "Ir a login";
  /// "Login título"
  @override
  String get loginScreenTitle => "Login título";
  /// "Estamos en la pantalla del login!!"
  @override
  String get loginScreenText => "Estamos en la pantalla del login!!";
  /// "Volver"
  @override
  String get loginScreenBack => "Volver";
  /// "Como sería?"
  @override
  String get bankScreenTitle => "Como sería?";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("es", "ES")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("es_ES" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_es_ES());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("es" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_es_ES());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}